#!/usr/bin/env bash

if ! go install github.com/timtadh/dynagrok; then
	echo "failed to compile dynagrok"
	exit 1
fi

dgpath=$1
if [[ -z "$dgpath" ]]; then
	echo "must supply the path to dynagrok's source tree as the first arg"
	exit 1
fi

goroot=$2
if [[ -z "$goroot" ]]; then
	echo "must supply a GOROOT (which is a git checkout) as the second arg"
	exit 1
fi

VERSION=$3
if [[ -z "$VERSION" ]]; then
	echo "must supply a go version as third arg"
	exit 1
fi

MUTATE=$4
if [[ -z "$MUTATE" ]]; then
	echo "must supply a mutation rate as fourth arg"
	exit 1
fi

MUTANTS=$5
if [[ -z "$MUTATE" ]]; then
	MUTANTS=/tmp/mutants
fi

##  MUTANT=$6
##  if [[ -z "$MUTATE" ]]; then
##  	MUTANT=1
##  fi

if [[ -d $MUTANTS ]]; then
	rm -rf $MUTANTS
fi
mkdir $MUTANTS

HEAD=$(git -C $goroot rev-parse HEAD)
COMMIT=$(git -C $goroot show-ref $VERSION)
if [[ $? -eq 0 ]]; then
	COMMIT=$(echo $COMMIT | cut -d \  -f 1)
else
	echo   $? $COMMIT
	COMMIT=$VERSION
fi

echo "head   $HEAD"
echo "commit $COMMIT"

if [[ $HEAD != $COMMIT ]]; then
	if ! git -C $goroot checkout $VERSION; then
		echo "the version supplied could not be checked out"
		exit 1
	fi

	if ! git -C $goroot clean -f; then
		echo "could not a do clean"
		exit 1
	fi

	( #subshell for compiling the go version
		cd $goroot/src
		if [ ! -f make.bash ]; then
			echo "not a real goroot $goroot/src/make.bash does not exist"
			exit 1
		fi
		OLDPATH=$PATH
		if ! source ./make.bash; then
			echo "could not build $VERSION"
			exit 1
		fi
	)
fi

COUNT=25
TESTS=$dgpath/examples/compiler-tests/oks
TARGET=/tmp/mutant-go-$VERSION
export GOROOT=$goroot
export GOPATH=/tmp/fake-go-path
for ((MUTANT=1;MUTANT<=$COUNT;MUTANT++)); do
	COMPILER=$MUTANTS/m$MUTANT/compiler
	rm -rf $TARGET/goroot/src/cmd/compile
	rm -rf $TARGET/goroot/src/cmd/internal/obj
	rm -rf $TARGET/goroot/src/cmd/internal/x86
	echo "dyangrok mutate $MUTANT"
	if ! dynagrok -d $dgpath \
			mutate \
				--keep-work -w $TARGET \
				-o $COMPILER \
				--instrument \
				-r $MUTATE \
				-m branch \
				--only cmd/compile,cmd/compile/internal/gc \
				--only cmd/compile/internal/ssa \
				--only cmd/compile/internal/amd64 \
				--only cmd/compile/internal/x86 \
				--only cmd/internal/obj \
				--only cmd/internal/x86 \
				cmd/compile
	then
		echo "mutating cmd/compile failed"
		echo "removing the mutant $MUTANTS/m$MUTANT/compiler"
		rm -rf $COMPILER
		MUTANT=$((MUTANT-1))
		echo "retrying"
		continue
	else
		echo "successfully mutated cmd/compile"
		mv $TARGET/mutations $MUTANTS/m$MUTANT/mutations
	fi

	if ! $COMPILER -o /dev/null $dgpath/examples/example.go; then
		echo "mutated compiler could not compile hello world"
		touch $MUTANTS/m$MUTANT/bad
	else
		echo "mutated compiler compiled hello world!"
		touch $MUTANTS/m$MUTANT/good
		OKS=$MUTANTS/m$MUTANT/oks
		FAILS=$MUTANTS/m$MUTANT/failed
		mkdir -p $OKS/tests $OKS/profiles
		mkdir -p $FAILS/tests $FAILS/profiles $FAILS/failures
		t=$((0))
		for path in $(find $TESTS -type f -name "*.go" | sort); do
			echo "running test $t $path"
			export DGPROF=$MUTANTS/m$MUTANT/tests/$t
			mkdir -p $DGPROF
			$COMPILER -o /dev/null $path
			if [[ -f $DGPROF/failures ]]; then
				cp $path $FAILS/tests/$t.go
				cp $DGPROF/flow-graph.dot $FAILS/profiles/$t.dot
				cp $DGPROF/failures $FAILS/failures/$t
			else
				cp $path $OKS/tests/$t.go
				cp $DGPROF/flow-graph.dot $OKS/profiles/$t.dot
			fi
			t=$((t+1))
		done
	fi
done

